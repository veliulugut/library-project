basePath: /v1
definitions:
  book.CreateBookModel:
    properties:
      author:
        type: string
      genre:
        type: string
      height:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  book.GetBookByName:
    properties:
      author:
        type: string
      genre:
        type: string
      height:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  book.GetBookModel:
    properties:
      author:
        type: string
      genre:
        type: string
      height:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  book.ListBookResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/ent.Book'
        type: array
      rowCount:
        type: integer
    type: object
  book.UpdateBookModel:
    properties:
      author:
        type: string
      genre:
        type: string
      height:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  ent.Book:
    properties:
      author:
        description: Author holds the value of the "author" field.
        type: string
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      genre:
        description: Genre holds the value of the "genre" field.
        type: string
      height:
        description: Height holds the value of the "height" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      publisher:
        description: Publisher holds the value of the "publisher" field.
        type: string
      title:
        description: Title holds the value of the "title" field.
        type: string
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  login.ReqLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  reset_password.SendResetPasswordReq:
    properties:
      email:
        type: string
    type: object
  reset_password.ValidateReq:
    properties:
      code:
        type: string
      confirm_new_password:
        type: string
      email:
        type: string
      new_password:
        type: string
    type: object
  user.CreateUserModel:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      user_name:
        type: string
    type: object
  user.GetUserModel:
    properties:
      created_at:
        type: string
      email:
        type: string
      user_name:
        type: string
    type: object
  user.UpdateUserModel:
    properties:
      email:
        type: string
      password:
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      user_name:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: veliulugut1@gmail.com
    name: Veli Ulugut
  description: library
  title: Library API
  version: "1.0"
paths:
  /auth/reset-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: enter email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/reset_password.SendResetPasswordReq'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: send reset password validation
      tags:
      - auth
  /auth/validate-reset-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: enter credentials
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/reset_password.ValidateReq'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: validate password reset
      tags:
      - auth
  /book:
    post:
      consumes:
      - application/json
      description: create a book
      parameters:
      - description: Create a new book
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/book.CreateBookModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: create book
      tags:
      - book
  /book/{id}:
    delete:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: delete book by id
      tags:
      - book
    put:
      consumes:
      - application/json
      parameters:
      - description: Update a  user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/book.UpdateBookModel'
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: update book by id
      tags:
      - book
  /book/{name}:
    get:
      consumes:
      - application/json
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/book.GetBookByName'
      summary: get book by name
      tags:
      - book
  /book/get/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/book.GetBookModel'
      security:
      - ApiKeyAuth: []
      summary: get book by id
      tags:
      - book
  /books:
    get:
      consumes:
      - application/json
      parameters:
      - description: pageNumber
        in: query
        name: pageNumber
        type: integer
      - description: pageSize
        in: query
        name: pageSize
        type: integer
      - description: isExport
        in: query
        name: isExport
        type: boolean
      - description: onlyThisPageExport
        in: query
        name: onlyThisPageExport
        type: boolean
      - description: orderBy
        in: query
        name: orderBy
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/book.ListBookResponse'
      security:
      - ApiKeyAuth: []
      summary: get list of books
      tags:
      - book
  /login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/login.ReqLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: login
      tags:
      - auth
  /user:
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: Create a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: create user
      tags:
      - user
  /user/{id}:
    delete:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: delete user by id
      tags:
      - user
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/user.GetUserModel'
      summary: get user by id
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: Update a  user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserModel'
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: update user by id
      tags:
      - user
swagger: "2.0"
