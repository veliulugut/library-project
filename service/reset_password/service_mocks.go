// Code generated by MockGen. DO NOT EDIT.
// Source: library/service/reset_password (interfaces: ServiceResetPass)

// Package reset_password is a generated GoMock package.
package reset_password

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceResetPass is a mock of ServiceResetPass interface.
type MockServiceResetPass struct {
	ctrl     *gomock.Controller
	recorder *MockServiceResetPassMockRecorder
}

// MockServiceResetPassMockRecorder is the mock recorder for MockServiceResetPass.
type MockServiceResetPassMockRecorder struct {
	mock *MockServiceResetPass
}

// NewMockServiceResetPass creates a new mock instance.
func NewMockServiceResetPass(ctrl *gomock.Controller) *MockServiceResetPass {
	mock := &MockServiceResetPass{ctrl: ctrl}
	mock.recorder = &MockServiceResetPassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceResetPass) EXPECT() *MockServiceResetPassMockRecorder {
	return m.recorder
}

// SendResetPasswordEmail mocks base method.
func (m *MockServiceResetPass) SendResetPasswordEmail(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordEmail indicates an expected call of SendResetPasswordEmail.
func (mr *MockServiceResetPassMockRecorder) SendResetPasswordEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordEmail", reflect.TypeOf((*MockServiceResetPass)(nil).SendResetPasswordEmail), arg0, arg1)
}

// Validate mocks base method.
func (m *MockServiceResetPass) Validate(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockServiceResetPassMockRecorder) Validate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockServiceResetPass)(nil).Validate), arg0, arg1, arg2, arg3, arg4)
}
