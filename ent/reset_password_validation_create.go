// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"library/ent/reset_password_validation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResetPasswordValidationCreate is the builder for creating a Reset_Password_Validation entity.
type ResetPasswordValidationCreate struct {
	config
	mutation *ResetPasswordValidationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "email" field.
func (rpvc *ResetPasswordValidationCreate) SetEmail(s string) *ResetPasswordValidationCreate {
	rpvc.mutation.SetEmail(s)
	return rpvc
}

// SetExpireDate sets the "expire_date" field.
func (rpvc *ResetPasswordValidationCreate) SetExpireDate(t time.Time) *ResetPasswordValidationCreate {
	rpvc.mutation.SetExpireDate(t)
	return rpvc
}

// SetCode sets the "code" field.
func (rpvc *ResetPasswordValidationCreate) SetCode(s string) *ResetPasswordValidationCreate {
	rpvc.mutation.SetCode(s)
	return rpvc
}

// Mutation returns the ResetPasswordValidationMutation object of the builder.
func (rpvc *ResetPasswordValidationCreate) Mutation() *ResetPasswordValidationMutation {
	return rpvc.mutation
}

// Save creates the Reset_Password_Validation in the database.
func (rpvc *ResetPasswordValidationCreate) Save(ctx context.Context) (*Reset_Password_Validation, error) {
	return withHooks(ctx, rpvc.sqlSave, rpvc.mutation, rpvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpvc *ResetPasswordValidationCreate) SaveX(ctx context.Context) *Reset_Password_Validation {
	v, err := rpvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpvc *ResetPasswordValidationCreate) Exec(ctx context.Context) error {
	_, err := rpvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvc *ResetPasswordValidationCreate) ExecX(ctx context.Context) {
	if err := rpvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpvc *ResetPasswordValidationCreate) check() error {
	if _, ok := rpvc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Reset_Password_Validation.email"`)}
	}
	if _, ok := rpvc.mutation.ExpireDate(); !ok {
		return &ValidationError{Name: "expire_date", err: errors.New(`ent: missing required field "Reset_Password_Validation.expire_date"`)}
	}
	if _, ok := rpvc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Reset_Password_Validation.code"`)}
	}
	return nil
}

func (rpvc *ResetPasswordValidationCreate) sqlSave(ctx context.Context) (*Reset_Password_Validation, error) {
	if err := rpvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rpvc.mutation.id = &_node.ID
	rpvc.mutation.done = true
	return _node, nil
}

func (rpvc *ResetPasswordValidationCreate) createSpec() (*Reset_Password_Validation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reset_Password_Validation{config: rpvc.config}
		_spec = sqlgraph.NewCreateSpec(reset_password_validation.Table, sqlgraph.NewFieldSpec(reset_password_validation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rpvc.conflict
	if value, ok := rpvc.mutation.Email(); ok {
		_spec.SetField(reset_password_validation.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := rpvc.mutation.ExpireDate(); ok {
		_spec.SetField(reset_password_validation.FieldExpireDate, field.TypeTime, value)
		_node.ExpireDate = value
	}
	if value, ok := rpvc.mutation.Code(); ok {
		_spec.SetField(reset_password_validation.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reset_Password_Validation.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Reset_Password_ValidationUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (rpvc *ResetPasswordValidationCreate) OnConflict(opts ...sql.ConflictOption) *Reset_Password_ValidationUpsertOne {
	rpvc.conflict = opts
	return &Reset_Password_ValidationUpsertOne{
		create: rpvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reset_Password_Validation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpvc *ResetPasswordValidationCreate) OnConflictColumns(columns ...string) *Reset_Password_ValidationUpsertOne {
	rpvc.conflict = append(rpvc.conflict, sql.ConflictColumns(columns...))
	return &Reset_Password_ValidationUpsertOne{
		create: rpvc,
	}
}

type (
	// Reset_Password_ValidationUpsertOne is the builder for "upsert"-ing
	//  one Reset_Password_Validation node.
	Reset_Password_ValidationUpsertOne struct {
		create *ResetPasswordValidationCreate
	}

	// Reset_Password_ValidationUpsert is the "OnConflict" setter.
	Reset_Password_ValidationUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *Reset_Password_ValidationUpsert) SetEmail(v string) *Reset_Password_ValidationUpsert {
	u.Set(reset_password_validation.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsert) UpdateEmail() *Reset_Password_ValidationUpsert {
	u.SetExcluded(reset_password_validation.FieldEmail)
	return u
}

// SetExpireDate sets the "expire_date" field.
func (u *Reset_Password_ValidationUpsert) SetExpireDate(v time.Time) *Reset_Password_ValidationUpsert {
	u.Set(reset_password_validation.FieldExpireDate, v)
	return u
}

// UpdateExpireDate sets the "expire_date" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsert) UpdateExpireDate() *Reset_Password_ValidationUpsert {
	u.SetExcluded(reset_password_validation.FieldExpireDate)
	return u
}

// SetCode sets the "code" field.
func (u *Reset_Password_ValidationUpsert) SetCode(v string) *Reset_Password_ValidationUpsert {
	u.Set(reset_password_validation.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsert) UpdateCode() *Reset_Password_ValidationUpsert {
	u.SetExcluded(reset_password_validation.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Reset_Password_Validation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Reset_Password_ValidationUpsertOne) UpdateNewValues() *Reset_Password_ValidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reset_Password_Validation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Reset_Password_ValidationUpsertOne) Ignore() *Reset_Password_ValidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Reset_Password_ValidationUpsertOne) DoNothing() *Reset_Password_ValidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResetPasswordValidationCreate.OnConflict
// documentation for more info.
func (u *Reset_Password_ValidationUpsertOne) Update(set func(*Reset_Password_ValidationUpsert)) *Reset_Password_ValidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Reset_Password_ValidationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *Reset_Password_ValidationUpsertOne) SetEmail(v string) *Reset_Password_ValidationUpsertOne {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsertOne) UpdateEmail() *Reset_Password_ValidationUpsertOne {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.UpdateEmail()
	})
}

// SetExpireDate sets the "expire_date" field.
func (u *Reset_Password_ValidationUpsertOne) SetExpireDate(v time.Time) *Reset_Password_ValidationUpsertOne {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.SetExpireDate(v)
	})
}

// UpdateExpireDate sets the "expire_date" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsertOne) UpdateExpireDate() *Reset_Password_ValidationUpsertOne {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.UpdateExpireDate()
	})
}

// SetCode sets the "code" field.
func (u *Reset_Password_ValidationUpsertOne) SetCode(v string) *Reset_Password_ValidationUpsertOne {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsertOne) UpdateCode() *Reset_Password_ValidationUpsertOne {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *Reset_Password_ValidationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResetPasswordValidationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Reset_Password_ValidationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Reset_Password_ValidationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Reset_Password_ValidationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResetPasswordValidationCreateBulk is the builder for creating many Reset_Password_Validation entities in bulk.
type ResetPasswordValidationCreateBulk struct {
	config
	builders []*ResetPasswordValidationCreate
	conflict []sql.ConflictOption
}

// Save creates the Reset_Password_Validation entities in the database.
func (rpvcb *ResetPasswordValidationCreateBulk) Save(ctx context.Context) ([]*Reset_Password_Validation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpvcb.builders))
	nodes := make([]*Reset_Password_Validation, len(rpvcb.builders))
	mutators := make([]Mutator, len(rpvcb.builders))
	for i := range rpvcb.builders {
		func(i int, root context.Context) {
			builder := rpvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResetPasswordValidationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rpvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpvcb *ResetPasswordValidationCreateBulk) SaveX(ctx context.Context) []*Reset_Password_Validation {
	v, err := rpvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpvcb *ResetPasswordValidationCreateBulk) Exec(ctx context.Context) error {
	_, err := rpvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvcb *ResetPasswordValidationCreateBulk) ExecX(ctx context.Context) {
	if err := rpvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reset_Password_Validation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Reset_Password_ValidationUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (rpvcb *ResetPasswordValidationCreateBulk) OnConflict(opts ...sql.ConflictOption) *Reset_Password_ValidationUpsertBulk {
	rpvcb.conflict = opts
	return &Reset_Password_ValidationUpsertBulk{
		create: rpvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reset_Password_Validation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpvcb *ResetPasswordValidationCreateBulk) OnConflictColumns(columns ...string) *Reset_Password_ValidationUpsertBulk {
	rpvcb.conflict = append(rpvcb.conflict, sql.ConflictColumns(columns...))
	return &Reset_Password_ValidationUpsertBulk{
		create: rpvcb,
	}
}

// Reset_Password_ValidationUpsertBulk is the builder for "upsert"-ing
// a bulk of Reset_Password_Validation nodes.
type Reset_Password_ValidationUpsertBulk struct {
	create *ResetPasswordValidationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reset_Password_Validation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Reset_Password_ValidationUpsertBulk) UpdateNewValues() *Reset_Password_ValidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reset_Password_Validation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Reset_Password_ValidationUpsertBulk) Ignore() *Reset_Password_ValidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Reset_Password_ValidationUpsertBulk) DoNothing() *Reset_Password_ValidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResetPasswordValidationCreateBulk.OnConflict
// documentation for more info.
func (u *Reset_Password_ValidationUpsertBulk) Update(set func(*Reset_Password_ValidationUpsert)) *Reset_Password_ValidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Reset_Password_ValidationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *Reset_Password_ValidationUpsertBulk) SetEmail(v string) *Reset_Password_ValidationUpsertBulk {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsertBulk) UpdateEmail() *Reset_Password_ValidationUpsertBulk {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.UpdateEmail()
	})
}

// SetExpireDate sets the "expire_date" field.
func (u *Reset_Password_ValidationUpsertBulk) SetExpireDate(v time.Time) *Reset_Password_ValidationUpsertBulk {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.SetExpireDate(v)
	})
}

// UpdateExpireDate sets the "expire_date" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsertBulk) UpdateExpireDate() *Reset_Password_ValidationUpsertBulk {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.UpdateExpireDate()
	})
}

// SetCode sets the "code" field.
func (u *Reset_Password_ValidationUpsertBulk) SetCode(v string) *Reset_Password_ValidationUpsertBulk {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *Reset_Password_ValidationUpsertBulk) UpdateCode() *Reset_Password_ValidationUpsertBulk {
	return u.Update(func(s *Reset_Password_ValidationUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *Reset_Password_ValidationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ResetPasswordValidationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResetPasswordValidationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Reset_Password_ValidationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
