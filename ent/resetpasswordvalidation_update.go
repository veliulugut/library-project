// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"library/ent/predicate"
	"library/ent/resetpasswordvalidation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResetPasswordValidationUpdate is the builder for updating ResetPasswordValidation entities.
type ResetPasswordValidationUpdate struct {
	config
	hooks    []Hook
	mutation *ResetPasswordValidationMutation
}

// Where appends a list predicates to the ResetPasswordValidationUpdate builder.
func (rpvu *ResetPasswordValidationUpdate) Where(ps ...predicate.ResetPasswordValidation) *ResetPasswordValidationUpdate {
	rpvu.mutation.Where(ps...)
	return rpvu
}

// SetEmail sets the "email" field.
func (rpvu *ResetPasswordValidationUpdate) SetEmail(s string) *ResetPasswordValidationUpdate {
	rpvu.mutation.SetEmail(s)
	return rpvu
}

// SetExpireDate sets the "expire_date" field.
func (rpvu *ResetPasswordValidationUpdate) SetExpireDate(t time.Time) *ResetPasswordValidationUpdate {
	rpvu.mutation.SetExpireDate(t)
	return rpvu
}

// SetCode sets the "code" field.
func (rpvu *ResetPasswordValidationUpdate) SetCode(s string) *ResetPasswordValidationUpdate {
	rpvu.mutation.SetCode(s)
	return rpvu
}

// Mutation returns the ResetPasswordValidationMutation object of the builder.
func (rpvu *ResetPasswordValidationUpdate) Mutation() *ResetPasswordValidationMutation {
	return rpvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpvu *ResetPasswordValidationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpvu.sqlSave, rpvu.mutation, rpvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpvu *ResetPasswordValidationUpdate) SaveX(ctx context.Context) int {
	affected, err := rpvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpvu *ResetPasswordValidationUpdate) Exec(ctx context.Context) error {
	_, err := rpvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvu *ResetPasswordValidationUpdate) ExecX(ctx context.Context) {
	if err := rpvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpvu *ResetPasswordValidationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(resetpasswordvalidation.Table, resetpasswordvalidation.Columns, sqlgraph.NewFieldSpec(resetpasswordvalidation.FieldID, field.TypeInt))
	if ps := rpvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpvu.mutation.Email(); ok {
		_spec.SetField(resetpasswordvalidation.FieldEmail, field.TypeString, value)
	}
	if value, ok := rpvu.mutation.ExpireDate(); ok {
		_spec.SetField(resetpasswordvalidation.FieldExpireDate, field.TypeTime, value)
	}
	if value, ok := rpvu.mutation.Code(); ok {
		_spec.SetField(resetpasswordvalidation.FieldCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resetpasswordvalidation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpvu.mutation.done = true
	return n, nil
}

// ResetPasswordValidationUpdateOne is the builder for updating a single ResetPasswordValidation entity.
type ResetPasswordValidationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResetPasswordValidationMutation
}

// SetEmail sets the "email" field.
func (rpvuo *ResetPasswordValidationUpdateOne) SetEmail(s string) *ResetPasswordValidationUpdateOne {
	rpvuo.mutation.SetEmail(s)
	return rpvuo
}

// SetExpireDate sets the "expire_date" field.
func (rpvuo *ResetPasswordValidationUpdateOne) SetExpireDate(t time.Time) *ResetPasswordValidationUpdateOne {
	rpvuo.mutation.SetExpireDate(t)
	return rpvuo
}

// SetCode sets the "code" field.
func (rpvuo *ResetPasswordValidationUpdateOne) SetCode(s string) *ResetPasswordValidationUpdateOne {
	rpvuo.mutation.SetCode(s)
	return rpvuo
}

// Mutation returns the ResetPasswordValidationMutation object of the builder.
func (rpvuo *ResetPasswordValidationUpdateOne) Mutation() *ResetPasswordValidationMutation {
	return rpvuo.mutation
}

// Where appends a list predicates to the ResetPasswordValidationUpdate builder.
func (rpvuo *ResetPasswordValidationUpdateOne) Where(ps ...predicate.ResetPasswordValidation) *ResetPasswordValidationUpdateOne {
	rpvuo.mutation.Where(ps...)
	return rpvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpvuo *ResetPasswordValidationUpdateOne) Select(field string, fields ...string) *ResetPasswordValidationUpdateOne {
	rpvuo.fields = append([]string{field}, fields...)
	return rpvuo
}

// Save executes the query and returns the updated ResetPasswordValidation entity.
func (rpvuo *ResetPasswordValidationUpdateOne) Save(ctx context.Context) (*ResetPasswordValidation, error) {
	return withHooks(ctx, rpvuo.sqlSave, rpvuo.mutation, rpvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpvuo *ResetPasswordValidationUpdateOne) SaveX(ctx context.Context) *ResetPasswordValidation {
	node, err := rpvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpvuo *ResetPasswordValidationUpdateOne) Exec(ctx context.Context) error {
	_, err := rpvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvuo *ResetPasswordValidationUpdateOne) ExecX(ctx context.Context) {
	if err := rpvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpvuo *ResetPasswordValidationUpdateOne) sqlSave(ctx context.Context) (_node *ResetPasswordValidation, err error) {
	_spec := sqlgraph.NewUpdateSpec(resetpasswordvalidation.Table, resetpasswordvalidation.Columns, sqlgraph.NewFieldSpec(resetpasswordvalidation.FieldID, field.TypeInt))
	id, ok := rpvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResetPasswordValidation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resetpasswordvalidation.FieldID)
		for _, f := range fields {
			if !resetpasswordvalidation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resetpasswordvalidation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpvuo.mutation.Email(); ok {
		_spec.SetField(resetpasswordvalidation.FieldEmail, field.TypeString, value)
	}
	if value, ok := rpvuo.mutation.ExpireDate(); ok {
		_spec.SetField(resetpasswordvalidation.FieldExpireDate, field.TypeTime, value)
	}
	if value, ok := rpvuo.mutation.Code(); ok {
		_spec.SetField(resetpasswordvalidation.FieldCode, field.TypeString, value)
	}
	_node = &ResetPasswordValidation{config: rpvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resetpasswordvalidation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpvuo.mutation.done = true
	return _node, nil
}
