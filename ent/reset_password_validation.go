// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"library/ent/reset_password_validation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Reset_Password_Validation is the model entity for the Reset_Password_Validation schema.
type Reset_Password_Validation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// ExpireDate holds the value of the "expire_date" field.
	ExpireDate time.Time `json:"expire_date,omitempty"`
	// Code holds the value of the "code" field.
	Code         string `json:"code,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reset_Password_Validation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reset_password_validation.FieldID:
			values[i] = new(sql.NullInt64)
		case reset_password_validation.FieldEmail, reset_password_validation.FieldCode:
			values[i] = new(sql.NullString)
		case reset_password_validation.FieldExpireDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reset_Password_Validation fields.
func (rpv *Reset_Password_Validation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reset_password_validation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rpv.ID = int(value.Int64)
		case reset_password_validation.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				rpv.Email = value.String
			}
		case reset_password_validation.FieldExpireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_date", values[i])
			} else if value.Valid {
				rpv.ExpireDate = value.Time
			}
		case reset_password_validation.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				rpv.Code = value.String
			}
		default:
			rpv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reset_Password_Validation.
// This includes values selected through modifiers, order, etc.
func (rpv *Reset_Password_Validation) Value(name string) (ent.Value, error) {
	return rpv.selectValues.Get(name)
}

// Update returns a builder for updating this Reset_Password_Validation.
// Note that you need to call Reset_Password_Validation.Unwrap() before calling this method if this Reset_Password_Validation
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpv *Reset_Password_Validation) Update() *ResetPasswordValidationUpdateOne {
	return NewResetPasswordValidationClient(rpv.config).UpdateOne(rpv)
}

// Unwrap unwraps the Reset_Password_Validation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpv *Reset_Password_Validation) Unwrap() *Reset_Password_Validation {
	_tx, ok := rpv.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reset_Password_Validation is not a transactional entity")
	}
	rpv.config.driver = _tx.drv
	return rpv
}

// String implements the fmt.Stringer.
func (rpv *Reset_Password_Validation) String() string {
	var builder strings.Builder
	builder.WriteString("Reset_Password_Validation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rpv.ID))
	builder.WriteString("email=")
	builder.WriteString(rpv.Email)
	builder.WriteString(", ")
	builder.WriteString("expire_date=")
	builder.WriteString(rpv.ExpireDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(rpv.Code)
	builder.WriteByte(')')
	return builder.String()
}

// Reset_Password_Validations is a parsable slice of Reset_Password_Validation.
type Reset_Password_Validations []*Reset_Password_Validation
