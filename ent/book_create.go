// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"library/ent/book"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookCreate is the builder for creating a Book entity.
type BookCreate struct {
	config
	mutation *BookMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (bc *BookCreate) SetTitle(s string) *BookCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetAuthor sets the "author" field.
func (bc *BookCreate) SetAuthor(s string) *BookCreate {
	bc.mutation.SetAuthor(s)
	return bc
}

// SetGenre sets the "genre" field.
func (bc *BookCreate) SetGenre(s string) *BookCreate {
	bc.mutation.SetGenre(s)
	return bc
}

// SetHeight sets the "height" field.
func (bc *BookCreate) SetHeight(s string) *BookCreate {
	bc.mutation.SetHeight(s)
	return bc
}

// SetPublisher sets the "publisher" field.
func (bc *BookCreate) SetPublisher(s string) *BookCreate {
	bc.mutation.SetPublisher(s)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BookCreate) SetCreatedAt(t time.Time) *BookCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BookCreate) SetNillableCreatedAt(t *time.Time) *BookCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BookCreate) SetUpdatedAt(t time.Time) *BookCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BookCreate) SetNillableUpdatedAt(t *time.Time) *BookCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// Mutation returns the BookMutation object of the builder.
func (bc *BookCreate) Mutation() *BookMutation {
	return bc.mutation
}

// Save creates the Book in the database.
func (bc *BookCreate) Save(ctx context.Context) (*Book, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookCreate) SaveX(ctx context.Context) *Book {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BookCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := book.DefaultCreatedAt
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := book.DefaultUpdatedAt
		bc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookCreate) check() error {
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Book.title"`)}
	}
	if _, ok := bc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Book.author"`)}
	}
	if _, ok := bc.mutation.Genre(); !ok {
		return &ValidationError{Name: "genre", err: errors.New(`ent: missing required field "Book.genre"`)}
	}
	if _, ok := bc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Book.height"`)}
	}
	if _, ok := bc.mutation.Publisher(); !ok {
		return &ValidationError{Name: "publisher", err: errors.New(`ent: missing required field "Book.publisher"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Book.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Book.updated_at"`)}
	}
	return nil
}

func (bc *BookCreate) sqlSave(ctx context.Context) (*Book, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BookCreate) createSpec() (*Book, *sqlgraph.CreateSpec) {
	var (
		_node = &Book{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(book.Table, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := bc.mutation.Genre(); ok {
		_spec.SetField(book.FieldGenre, field.TypeString, value)
		_node.Genre = value
	}
	if value, ok := bc.mutation.Height(); ok {
		_spec.SetField(book.FieldHeight, field.TypeString, value)
		_node.Height = value
	}
	if value, ok := bc.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(book.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Book.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BookUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (bc *BookCreate) OnConflict(opts ...sql.ConflictOption) *BookUpsertOne {
	bc.conflict = opts
	return &BookUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Book.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BookCreate) OnConflictColumns(columns ...string) *BookUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BookUpsertOne{
		create: bc,
	}
}

type (
	// BookUpsertOne is the builder for "upsert"-ing
	//  one Book node.
	BookUpsertOne struct {
		create *BookCreate
	}

	// BookUpsert is the "OnConflict" setter.
	BookUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *BookUpsert) SetTitle(v string) *BookUpsert {
	u.Set(book.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BookUpsert) UpdateTitle() *BookUpsert {
	u.SetExcluded(book.FieldTitle)
	return u
}

// SetAuthor sets the "author" field.
func (u *BookUpsert) SetAuthor(v string) *BookUpsert {
	u.Set(book.FieldAuthor, v)
	return u
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *BookUpsert) UpdateAuthor() *BookUpsert {
	u.SetExcluded(book.FieldAuthor)
	return u
}

// SetGenre sets the "genre" field.
func (u *BookUpsert) SetGenre(v string) *BookUpsert {
	u.Set(book.FieldGenre, v)
	return u
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *BookUpsert) UpdateGenre() *BookUpsert {
	u.SetExcluded(book.FieldGenre)
	return u
}

// SetHeight sets the "height" field.
func (u *BookUpsert) SetHeight(v string) *BookUpsert {
	u.Set(book.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BookUpsert) UpdateHeight() *BookUpsert {
	u.SetExcluded(book.FieldHeight)
	return u
}

// SetPublisher sets the "publisher" field.
func (u *BookUpsert) SetPublisher(v string) *BookUpsert {
	u.Set(book.FieldPublisher, v)
	return u
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *BookUpsert) UpdatePublisher() *BookUpsert {
	u.SetExcluded(book.FieldPublisher)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BookUpsert) SetCreatedAt(v time.Time) *BookUpsert {
	u.Set(book.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BookUpsert) UpdateCreatedAt() *BookUpsert {
	u.SetExcluded(book.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BookUpsert) SetUpdatedAt(v time.Time) *BookUpsert {
	u.Set(book.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BookUpsert) UpdateUpdatedAt() *BookUpsert {
	u.SetExcluded(book.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Book.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BookUpsertOne) UpdateNewValues() *BookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Book.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BookUpsertOne) Ignore() *BookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BookUpsertOne) DoNothing() *BookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BookCreate.OnConflict
// documentation for more info.
func (u *BookUpsertOne) Update(set func(*BookUpsert)) *BookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BookUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *BookUpsertOne) SetTitle(v string) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BookUpsertOne) UpdateTitle() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdateTitle()
	})
}

// SetAuthor sets the "author" field.
func (u *BookUpsertOne) SetAuthor(v string) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *BookUpsertOne) UpdateAuthor() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdateAuthor()
	})
}

// SetGenre sets the "genre" field.
func (u *BookUpsertOne) SetGenre(v string) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetGenre(v)
	})
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *BookUpsertOne) UpdateGenre() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdateGenre()
	})
}

// SetHeight sets the "height" field.
func (u *BookUpsertOne) SetHeight(v string) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BookUpsertOne) UpdateHeight() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdateHeight()
	})
}

// SetPublisher sets the "publisher" field.
func (u *BookUpsertOne) SetPublisher(v string) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *BookUpsertOne) UpdatePublisher() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdatePublisher()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *BookUpsertOne) SetCreatedAt(v time.Time) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BookUpsertOne) UpdateCreatedAt() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BookUpsertOne) SetUpdatedAt(v time.Time) *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BookUpsertOne) UpdateUpdatedAt() *BookUpsertOne {
	return u.Update(func(s *BookUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BookUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BookCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BookUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BookUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BookUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BookCreateBulk is the builder for creating many Book entities in bulk.
type BookCreateBulk struct {
	config
	builders []*BookCreate
	conflict []sql.ConflictOption
}

// Save creates the Book entities in the database.
func (bcb *BookCreateBulk) Save(ctx context.Context) ([]*Book, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Book, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookCreateBulk) SaveX(ctx context.Context) []*Book {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Book.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BookUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (bcb *BookCreateBulk) OnConflict(opts ...sql.ConflictOption) *BookUpsertBulk {
	bcb.conflict = opts
	return &BookUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Book.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BookCreateBulk) OnConflictColumns(columns ...string) *BookUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BookUpsertBulk{
		create: bcb,
	}
}

// BookUpsertBulk is the builder for "upsert"-ing
// a bulk of Book nodes.
type BookUpsertBulk struct {
	create *BookCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Book.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BookUpsertBulk) UpdateNewValues() *BookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Book.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BookUpsertBulk) Ignore() *BookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BookUpsertBulk) DoNothing() *BookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BookCreateBulk.OnConflict
// documentation for more info.
func (u *BookUpsertBulk) Update(set func(*BookUpsert)) *BookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BookUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *BookUpsertBulk) SetTitle(v string) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdateTitle() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdateTitle()
	})
}

// SetAuthor sets the "author" field.
func (u *BookUpsertBulk) SetAuthor(v string) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdateAuthor() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdateAuthor()
	})
}

// SetGenre sets the "genre" field.
func (u *BookUpsertBulk) SetGenre(v string) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetGenre(v)
	})
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdateGenre() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdateGenre()
	})
}

// SetHeight sets the "height" field.
func (u *BookUpsertBulk) SetHeight(v string) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdateHeight() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdateHeight()
	})
}

// SetPublisher sets the "publisher" field.
func (u *BookUpsertBulk) SetPublisher(v string) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdatePublisher() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdatePublisher()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *BookUpsertBulk) SetCreatedAt(v time.Time) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdateCreatedAt() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BookUpsertBulk) SetUpdatedAt(v time.Time) *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BookUpsertBulk) UpdateUpdatedAt() *BookUpsertBulk {
	return u.Update(func(s *BookUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BookUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BookCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BookCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BookUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
