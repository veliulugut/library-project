// Code generated by ent, DO NOT EDIT.

package reset_password_validation

import (
	"library/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldEmail, v))
}

// ExpireDate applies equality check predicate on the "expire_date" field. It's identical to ExpireDateEQ.
func ExpireDate(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldExpireDate, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldCode, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldContainsFold(FieldEmail, v))
}

// ExpireDateEQ applies the EQ predicate on the "expire_date" field.
func ExpireDateEQ(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldExpireDate, v))
}

// ExpireDateNEQ applies the NEQ predicate on the "expire_date" field.
func ExpireDateNEQ(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNEQ(FieldExpireDate, v))
}

// ExpireDateIn applies the In predicate on the "expire_date" field.
func ExpireDateIn(vs ...time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldIn(FieldExpireDate, vs...))
}

// ExpireDateNotIn applies the NotIn predicate on the "expire_date" field.
func ExpireDateNotIn(vs ...time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNotIn(FieldExpireDate, vs...))
}

// ExpireDateGT applies the GT predicate on the "expire_date" field.
func ExpireDateGT(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGT(FieldExpireDate, v))
}

// ExpireDateGTE applies the GTE predicate on the "expire_date" field.
func ExpireDateGTE(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGTE(FieldExpireDate, v))
}

// ExpireDateLT applies the LT predicate on the "expire_date" field.
func ExpireDateLT(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLT(FieldExpireDate, v))
}

// ExpireDateLTE applies the LTE predicate on the "expire_date" field.
func ExpireDateLTE(v time.Time) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLTE(FieldExpireDate, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(sql.FieldContainsFold(FieldCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reset_Password_Validation) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reset_Password_Validation) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reset_Password_Validation) predicate.Reset_Password_Validation {
	return predicate.Reset_Password_Validation(func(s *sql.Selector) {
		p(s.Not())
	})
}
