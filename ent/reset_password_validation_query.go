// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"library/ent/predicate"
	"library/ent/reset_password_validation"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResetPasswordValidationQuery is the builder for querying Reset_Password_Validation entities.
type ResetPasswordValidationQuery struct {
	config
	ctx        *QueryContext
	order      []reset_password_validation.OrderOption
	inters     []Interceptor
	predicates []predicate.Reset_Password_Validation
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ResetPasswordValidationQuery builder.
func (rpvq *ResetPasswordValidationQuery) Where(ps ...predicate.Reset_Password_Validation) *ResetPasswordValidationQuery {
	rpvq.predicates = append(rpvq.predicates, ps...)
	return rpvq
}

// Limit the number of records to be returned by this query.
func (rpvq *ResetPasswordValidationQuery) Limit(limit int) *ResetPasswordValidationQuery {
	rpvq.ctx.Limit = &limit
	return rpvq
}

// Offset to start from.
func (rpvq *ResetPasswordValidationQuery) Offset(offset int) *ResetPasswordValidationQuery {
	rpvq.ctx.Offset = &offset
	return rpvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rpvq *ResetPasswordValidationQuery) Unique(unique bool) *ResetPasswordValidationQuery {
	rpvq.ctx.Unique = &unique
	return rpvq
}

// Order specifies how the records should be ordered.
func (rpvq *ResetPasswordValidationQuery) Order(o ...reset_password_validation.OrderOption) *ResetPasswordValidationQuery {
	rpvq.order = append(rpvq.order, o...)
	return rpvq
}

// First returns the first Reset_Password_Validation entity from the query.
// Returns a *NotFoundError when no Reset_Password_Validation was found.
func (rpvq *ResetPasswordValidationQuery) First(ctx context.Context) (*Reset_Password_Validation, error) {
	nodes, err := rpvq.Limit(1).All(setContextOp(ctx, rpvq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{reset_password_validation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) FirstX(ctx context.Context) *Reset_Password_Validation {
	node, err := rpvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Reset_Password_Validation ID from the query.
// Returns a *NotFoundError when no Reset_Password_Validation ID was found.
func (rpvq *ResetPasswordValidationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rpvq.Limit(1).IDs(setContextOp(ctx, rpvq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{reset_password_validation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) FirstIDX(ctx context.Context) int {
	id, err := rpvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Reset_Password_Validation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Reset_Password_Validation entity is found.
// Returns a *NotFoundError when no Reset_Password_Validation entities are found.
func (rpvq *ResetPasswordValidationQuery) Only(ctx context.Context) (*Reset_Password_Validation, error) {
	nodes, err := rpvq.Limit(2).All(setContextOp(ctx, rpvq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{reset_password_validation.Label}
	default:
		return nil, &NotSingularError{reset_password_validation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) OnlyX(ctx context.Context) *Reset_Password_Validation {
	node, err := rpvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Reset_Password_Validation ID in the query.
// Returns a *NotSingularError when more than one Reset_Password_Validation ID is found.
// Returns a *NotFoundError when no entities are found.
func (rpvq *ResetPasswordValidationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rpvq.Limit(2).IDs(setContextOp(ctx, rpvq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{reset_password_validation.Label}
	default:
		err = &NotSingularError{reset_password_validation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) OnlyIDX(ctx context.Context) int {
	id, err := rpvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Reset_Password_Validations.
func (rpvq *ResetPasswordValidationQuery) All(ctx context.Context) ([]*Reset_Password_Validation, error) {
	ctx = setContextOp(ctx, rpvq.ctx, "All")
	if err := rpvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Reset_Password_Validation, *ResetPasswordValidationQuery]()
	return withInterceptors[[]*Reset_Password_Validation](ctx, rpvq, qr, rpvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) AllX(ctx context.Context) []*Reset_Password_Validation {
	nodes, err := rpvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Reset_Password_Validation IDs.
func (rpvq *ResetPasswordValidationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if rpvq.ctx.Unique == nil && rpvq.path != nil {
		rpvq.Unique(true)
	}
	ctx = setContextOp(ctx, rpvq.ctx, "IDs")
	if err = rpvq.Select(reset_password_validation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) IDsX(ctx context.Context) []int {
	ids, err := rpvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpvq *ResetPasswordValidationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rpvq.ctx, "Count")
	if err := rpvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rpvq, querierCount[*ResetPasswordValidationQuery](), rpvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) CountX(ctx context.Context) int {
	count, err := rpvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpvq *ResetPasswordValidationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rpvq.ctx, "Exist")
	switch _, err := rpvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rpvq *ResetPasswordValidationQuery) ExistX(ctx context.Context) bool {
	exist, err := rpvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ResetPasswordValidationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpvq *ResetPasswordValidationQuery) Clone() *ResetPasswordValidationQuery {
	if rpvq == nil {
		return nil
	}
	return &ResetPasswordValidationQuery{
		config:     rpvq.config,
		ctx:        rpvq.ctx.Clone(),
		order:      append([]reset_password_validation.OrderOption{}, rpvq.order...),
		inters:     append([]Interceptor{}, rpvq.inters...),
		predicates: append([]predicate.Reset_Password_Validation{}, rpvq.predicates...),
		// clone intermediate query.
		sql:  rpvq.sql.Clone(),
		path: rpvq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Email string `json:"email,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResetPasswordValidation.Query().
//		GroupBy(reset_password_validation.FieldEmail).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rpvq *ResetPasswordValidationQuery) GroupBy(field string, fields ...string) *ResetPasswordValidationGroupBy {
	rpvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ResetPasswordValidationGroupBy{build: rpvq}
	grbuild.flds = &rpvq.ctx.Fields
	grbuild.label = reset_password_validation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Email string `json:"email,omitempty"`
//	}
//
//	client.ResetPasswordValidation.Query().
//		Select(reset_password_validation.FieldEmail).
//		Scan(ctx, &v)
func (rpvq *ResetPasswordValidationQuery) Select(fields ...string) *ResetPasswordValidationSelect {
	rpvq.ctx.Fields = append(rpvq.ctx.Fields, fields...)
	sbuild := &ResetPasswordValidationSelect{ResetPasswordValidationQuery: rpvq}
	sbuild.label = reset_password_validation.Label
	sbuild.flds, sbuild.scan = &rpvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ResetPasswordValidationSelect configured with the given aggregations.
func (rpvq *ResetPasswordValidationQuery) Aggregate(fns ...AggregateFunc) *ResetPasswordValidationSelect {
	return rpvq.Select().Aggregate(fns...)
}

func (rpvq *ResetPasswordValidationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rpvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rpvq); err != nil {
				return err
			}
		}
	}
	for _, f := range rpvq.ctx.Fields {
		if !reset_password_validation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rpvq.path != nil {
		prev, err := rpvq.path(ctx)
		if err != nil {
			return err
		}
		rpvq.sql = prev
	}
	return nil
}

func (rpvq *ResetPasswordValidationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Reset_Password_Validation, error) {
	var (
		nodes = []*Reset_Password_Validation{}
		_spec = rpvq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Reset_Password_Validation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Reset_Password_Validation{config: rpvq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rpvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (rpvq *ResetPasswordValidationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpvq.querySpec()
	_spec.Node.Columns = rpvq.ctx.Fields
	if len(rpvq.ctx.Fields) > 0 {
		_spec.Unique = rpvq.ctx.Unique != nil && *rpvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rpvq.driver, _spec)
}

func (rpvq *ResetPasswordValidationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(reset_password_validation.Table, reset_password_validation.Columns, sqlgraph.NewFieldSpec(reset_password_validation.FieldID, field.TypeInt))
	_spec.From = rpvq.sql
	if unique := rpvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rpvq.path != nil {
		_spec.Unique = true
	}
	if fields := rpvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reset_password_validation.FieldID)
		for i := range fields {
			if fields[i] != reset_password_validation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rpvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpvq *ResetPasswordValidationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rpvq.driver.Dialect())
	t1 := builder.Table(reset_password_validation.Table)
	columns := rpvq.ctx.Fields
	if len(columns) == 0 {
		columns = reset_password_validation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rpvq.sql != nil {
		selector = rpvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rpvq.ctx.Unique != nil && *rpvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rpvq.predicates {
		p(selector)
	}
	for _, p := range rpvq.order {
		p(selector)
	}
	if offset := rpvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResetPasswordValidationGroupBy is the group-by builder for Reset_Password_Validation entities.
type ResetPasswordValidationGroupBy struct {
	selector
	build *ResetPasswordValidationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpvgb *ResetPasswordValidationGroupBy) Aggregate(fns ...AggregateFunc) *ResetPasswordValidationGroupBy {
	rpvgb.fns = append(rpvgb.fns, fns...)
	return rpvgb
}

// Scan applies the selector query and scans the result into the given value.
func (rpvgb *ResetPasswordValidationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpvgb.build.ctx, "GroupBy")
	if err := rpvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResetPasswordValidationQuery, *ResetPasswordValidationGroupBy](ctx, rpvgb.build, rpvgb, rpvgb.build.inters, v)
}

func (rpvgb *ResetPasswordValidationGroupBy) sqlScan(ctx context.Context, root *ResetPasswordValidationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rpvgb.fns))
	for _, fn := range rpvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rpvgb.flds)+len(rpvgb.fns))
		for _, f := range *rpvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rpvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ResetPasswordValidationSelect is the builder for selecting fields of ResetPasswordValidation entities.
type ResetPasswordValidationSelect struct {
	*ResetPasswordValidationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rpvs *ResetPasswordValidationSelect) Aggregate(fns ...AggregateFunc) *ResetPasswordValidationSelect {
	rpvs.fns = append(rpvs.fns, fns...)
	return rpvs
}

// Scan applies the selector query and scans the result into the given value.
func (rpvs *ResetPasswordValidationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpvs.ctx, "Select")
	if err := rpvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResetPasswordValidationQuery, *ResetPasswordValidationSelect](ctx, rpvs.ResetPasswordValidationQuery, rpvs, rpvs.inters, v)
}

func (rpvs *ResetPasswordValidationSelect) sqlScan(ctx context.Context, root *ResetPasswordValidationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rpvs.fns))
	for _, fn := range rpvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rpvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
