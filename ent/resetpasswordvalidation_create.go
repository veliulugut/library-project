// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"library/ent/resetpasswordvalidation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResetPasswordValidationCreate is the builder for creating a ResetPasswordValidation entity.
type ResetPasswordValidationCreate struct {
	config
	mutation *ResetPasswordValidationMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (rpvc *ResetPasswordValidationCreate) SetEmail(s string) *ResetPasswordValidationCreate {
	rpvc.mutation.SetEmail(s)
	return rpvc
}

// SetExpireDate sets the "expire_date" field.
func (rpvc *ResetPasswordValidationCreate) SetExpireDate(t time.Time) *ResetPasswordValidationCreate {
	rpvc.mutation.SetExpireDate(t)
	return rpvc
}

// SetCode sets the "code" field.
func (rpvc *ResetPasswordValidationCreate) SetCode(s string) *ResetPasswordValidationCreate {
	rpvc.mutation.SetCode(s)
	return rpvc
}

// Mutation returns the ResetPasswordValidationMutation object of the builder.
func (rpvc *ResetPasswordValidationCreate) Mutation() *ResetPasswordValidationMutation {
	return rpvc.mutation
}

// Save creates the ResetPasswordValidation in the database.
func (rpvc *ResetPasswordValidationCreate) Save(ctx context.Context) (*ResetPasswordValidation, error) {
	return withHooks(ctx, rpvc.sqlSave, rpvc.mutation, rpvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpvc *ResetPasswordValidationCreate) SaveX(ctx context.Context) *ResetPasswordValidation {
	v, err := rpvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpvc *ResetPasswordValidationCreate) Exec(ctx context.Context) error {
	_, err := rpvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvc *ResetPasswordValidationCreate) ExecX(ctx context.Context) {
	if err := rpvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpvc *ResetPasswordValidationCreate) check() error {
	if _, ok := rpvc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "ResetPasswordValidation.email"`)}
	}
	if _, ok := rpvc.mutation.ExpireDate(); !ok {
		return &ValidationError{Name: "expire_date", err: errors.New(`ent: missing required field "ResetPasswordValidation.expire_date"`)}
	}
	if _, ok := rpvc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "ResetPasswordValidation.code"`)}
	}
	return nil
}

func (rpvc *ResetPasswordValidationCreate) sqlSave(ctx context.Context) (*ResetPasswordValidation, error) {
	if err := rpvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rpvc.mutation.id = &_node.ID
	rpvc.mutation.done = true
	return _node, nil
}

func (rpvc *ResetPasswordValidationCreate) createSpec() (*ResetPasswordValidation, *sqlgraph.CreateSpec) {
	var (
		_node = &ResetPasswordValidation{config: rpvc.config}
		_spec = sqlgraph.NewCreateSpec(resetpasswordvalidation.Table, sqlgraph.NewFieldSpec(resetpasswordvalidation.FieldID, field.TypeInt))
	)
	if value, ok := rpvc.mutation.Email(); ok {
		_spec.SetField(resetpasswordvalidation.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := rpvc.mutation.ExpireDate(); ok {
		_spec.SetField(resetpasswordvalidation.FieldExpireDate, field.TypeTime, value)
		_node.ExpireDate = value
	}
	if value, ok := rpvc.mutation.Code(); ok {
		_spec.SetField(resetpasswordvalidation.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	return _node, _spec
}

// ResetPasswordValidationCreateBulk is the builder for creating many ResetPasswordValidation entities in bulk.
type ResetPasswordValidationCreateBulk struct {
	config
	builders []*ResetPasswordValidationCreate
}

// Save creates the ResetPasswordValidation entities in the database.
func (rpvcb *ResetPasswordValidationCreateBulk) Save(ctx context.Context) ([]*ResetPasswordValidation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpvcb.builders))
	nodes := make([]*ResetPasswordValidation, len(rpvcb.builders))
	mutators := make([]Mutator, len(rpvcb.builders))
	for i := range rpvcb.builders {
		func(i int, root context.Context) {
			builder := rpvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResetPasswordValidationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpvcb *ResetPasswordValidationCreateBulk) SaveX(ctx context.Context) []*ResetPasswordValidation {
	v, err := rpvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpvcb *ResetPasswordValidationCreateBulk) Exec(ctx context.Context) error {
	_, err := rpvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvcb *ResetPasswordValidationCreateBulk) ExecX(ctx context.Context) {
	if err := rpvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
